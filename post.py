import random
from telethon import TelegramClient, events
from telethon.tl.functions.messages import GetDiscussionMessageRequest
from telethon.tl.types import InputPeerChannel
from .. import loader, utils

@loader.tds
class CommentNewPostsMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ"""

    strings = {"name": "CommentNewPosts"}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.target_channel_username = 'yarchefis_channel'  # –Æ–∑–µ—Ä–Ω–µ–π–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        self.channel_entity = await client.get_entity(self.target_channel_username)
        self.channel_id = self.channel_entity.id

        # –ú–∞—Å—Å–∏–≤ —Ñ—Ä–∞–∑ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        self.comments = [
    "–î–∞–≤–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–µ–π üôè",
    "–£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π üåø",
    "–ë–µ–∑ –º–∞—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üòá",
    "–ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å! üí¨‚ú®",
    "–ë—É–¥—å—Ç–µ –¥–æ–±—Ä—ã –≤ –æ–±—â–µ–Ω–∏–∏, –±–µ–∑ —Ä—É–≥–∞–Ω–∏ üå∏",
    "–ú–∏—Ä–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –±–µ–∑ –≥—Ä—É–±—ã—Ö —Å–ª–æ–≤ üïäÔ∏è",
    "–ë–µ–∑ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚ùåüó£Ô∏è",
    "–î–∞–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å üôå",
    "–í–∞—à–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ç üó£Ô∏è‚ùó",
    "–ü–æ–º–Ω–∏—Ç–µ: —Ö–æ—Ä–æ—à–µ–µ –æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–∏ üí´",
    "–ù–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –º–∞—Ç–∞, –¥–∞–≤–∞–π—Ç–µ —É–≤–∞–∂–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ ü§ù",
    "–ë—É–¥–µ–º —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –±–µ–∑ —Ä—É–≥–∞–Ω–∏ üìùü´∂",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Ä–∞–∂–∞–π—Ç–µ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ üí°",
    "–û–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π ‚Äî –∑–∞–ª–æ–≥ —Ö–æ—Ä–æ—à–µ–π –±–µ—Å–µ–¥—ã üåü",
    "–î–∞–≤–∞–π—Ç–µ –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∏ –∏–∑–±–µ–≥–∞—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–π —Ä—É–≥–∞–Ω–∏ üôèüòä"
]

    @loader.watcher(incoming=True, chats='yarchefis_channel')
    async def watcher(self, message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ
        if message.is_channel and message.to_id.channel_id == self.channel_id and not message.out:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                discussion = await self.client(GetDiscussionMessageRequest(
                    peer=InputPeerChannel(self.channel_id, self.channel_entity.access_hash),
                    msg_id=message.id
                ))

                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
                comment = random.choice(self.comments)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
                await self.client.send_message(
                    entity=discussion.messages[0].to_id,
                    message=comment,
                    reply_to=discussion.messages[0].id
                )
            except Exception as e:
                self.log.error(f"Failed to comment on post: {e}")