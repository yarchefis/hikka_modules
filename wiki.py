import logging
import requests
from telethon import events
from .. import loader, utils  # type: ignore

logger = logging.getLogger(__name__)

@loader.tds
class WikiMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏."""

    strings = {
        "name": "WikiMod",
        "processing": "üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏...",
        "not_found": "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
        "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –í–∏–∫–∏–ø–µ–¥–∏–∏."
    }

    async def client_ready(self, client, db):
        self.client = client

    @loader.unrestricted
    async def wikicmd(self, message):
        """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .wiki <–∑–∞–ø—Ä–æ—Å>"""
        args = utils.get_args_raw(message)
        if not args:
            await message.reply("‚ùì –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        await message.reply(self.strings["processing"])
        query = args
        url = f"https://ru.wikipedia.org/w/api.php?action=query&titles={query}&prop=extracts&exintro=true&explaintext=true&format=json"

        try:
            response = requests.get(url)
            data = response.json()

            pages = data.get("query", {}).get("pages", {})
            if not pages:
                await message.reply(self.strings["not_found"])
                return

            page = next(iter(pages.values()))
            extract = page.get("extract", self.strings["not_found"])

            await message.reply(extract)
        except Exception as e:
            logger.error(f"Error fetching data from Wikipedia: {e}")
            await message.reply(self.strings["error"])
