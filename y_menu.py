import logging
from telethon.tl.types import Message
from telethon.tl.functions.messages import ForwardMessagesRequest
from .. import loader, utils  # type: ignore
from time import time

logger = logging.getLogger(__name__)

@loader.tds
class yMenuMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."""

    strings = {
        "name": "yMenu",
        "config_response": "–î–µ—Ä–∂–∏ –∫–æ–Ω—Ñ–∏–≥. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–¥–∞–≤–∞–π—Ç–µ –º–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å—ã! –ò–∑—É—á–∏: http://nometa.xyz <emoji document_id=5274196681024348149>üòä</emoji>",
        "spam_warning": "<emoji document_id=5447644880824181073>‚ö†Ô∏è</emoji> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è. <emoji document_id=5386367538735104399>‚åõ</emoji>",
        "file_chat_id": 2163297996,  # ID —á–∞—Ç–∞
        "file_message_id": 6,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
        "spam_wait_time": 20  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    }

    keywords = [
        "–∫–æ–Ω—Ñ–∏–≥", "–∫—Ñ–≥", "–≤–∞—Ä–ø", "config", "warp", "kfg",
        "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "configuration", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä", "–∫o–Ω—Ñ–∏–≥", "k—Ñ–≥"
    ]

    def __init__(self):
        self.last_sent = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.spam_warned = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def client_ready(self, client, db):
        self.client = client
        self.me = await client.get_me()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ

    async def watcher(self, message: Message):
        if message.is_private and message.sender_id != self.me.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
            for keyword in self.keywords:
                if keyword in message.raw_text.lower():
                    now = time()
                    if message.sender_id not in self.last_sent or now - self.last_sent[message.sender_id] > self.strings["spam_wait_time"]:
                        self.last_sent[message.sender_id] = now
                        self.spam_warned.pop(message.sender_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                        await message.reply(self.strings["config_response"])
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.client(ForwardMessagesRequest(
                            from_peer=self.strings["file_chat_id"],
                            id=[self.strings["file_message_id"]],
                            to_peer=message.chat_id,
                            with_my_score=False
                        ))
                    else:
                        if message.sender_id not in self.spam_warned:
                            self.spam_warned[message.sender_id] = True
                            await message.reply(self.strings["spam_warning"])
                        logger.info(f"Spam protection: Ignored message from {message.sender_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
                    await message.client.send_read_acknowledge(
                        message.chat_id, clear_mentions=True
                    )
                    break

    @loader.command()
    async def meta(self, message: Message):
        """–º–µ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞"""
        meta_link = '<a href="http://nometa.xyz">–ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∏–∑—É—á–∏!</a>'
        text = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–¥–∞–≤–∞–π—Ç–µ –º–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å—ã! {meta_link}'
        await utils.answer(message, text)
