# ---------------------------------------------------------------------------------
#  /\_/\  üåê author web site https://yarchefis.ru
# ( o.o )  üîì Not licensed.
#  > ^ <  
# ---------------------------------------------------------------------------------
# Name: yMenu
# Description: –ú–æ–¥—É–ª—å –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.
# Author: yarchefis
# ---------------------------------------------------------------------------------

import logging
from telethon.tl.types import Message
from telethon.tl.functions.messages import ForwardMessagesRequest
from telethon.tl.functions.users import GetFullUserRequest
from .. import loader, utils  # type: ignore
from time import time

logger = logging.getLogger(__name__)

@loader.tds
class yMenuMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."""

    strings = {
        "name": "yMenu",
        "config_response": "–ü—Ä–∏–≤–µ—Ç, –¥–µ—Ä–∂–∏ –∫–æ–Ω—Ñ–∏–≥",
        "file_chat_id": -1002244812198,  # ID —á–∞—Ç–∞
        "file_message_id": 3,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
        "spam_wait_time": 60  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    }

    def __init__(self):
        self.last_sent = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    async def client_ready(self, client, db):
        self.client = client
        self.me = await client.get_me()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ

    async def watcher(self, message: Message):
        if message.is_private and message.sender_id != self.me.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if any(word in message.raw_text.lower() for word in ["–∫–æ–Ω—Ñ–∏–≥", "–∫—Ñ–≥", "–≤–∞—Ä–ø", "config", "warp", "kfg"]):
                now = time()
                if message.sender_id not in self.last_sent or now - self.last_sent[message.sender_id] > self.strings["spam_wait_time"]:
                    self.last_sent[message.sender_id] = now
                    await message.reply(self.strings["config_response"])
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.client(ForwardMessagesRequest(
                        from_peer=self.strings["file_chat_id"],
                        id=[self.strings["file_message_id"]],
                        to_peer=message.chat_id,
                        with_my_score=False
                    ))
                else:
                    logger.info(f"Spam protection: Ignored message from {message.sender_id}")

